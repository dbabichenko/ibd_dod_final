import csv
import os

from utilities import sqlutils, stringutils, globals

# This script imports prescription and medication data for existing study patients
# Data is imported from IBD Reg Pts Medications_2014-02-21.csv
# The following columns are imported:
#       PAT_ID (MRN)
# 	    PAT_STATUS (alive or dead)
#       MED_ID (medication ID)
#       MED_NAME (medication name)
#       SIMPLE_GENERIC_NAME
#       ORDERING_DATE
#       START_DATE
#       END_DATE
#       THERAPEUTIC_CLASS
#       PHARM_CLASS
#       PHARM_SUB_CLASS
# This script populates the following two tables in ibd_import database:
#       medication
#       prescription
# Excel to database field mappings are defined in mappings/2014/medications.json


# Get a list of mapped fields
map = stringutils.getJsonMapping(globals.CURRENT_YEAR, 'medications')


# Start medication data import
filename = map["FILENAME"] # Source filename (defined in mappings JSON file)

os.chdir(globals.CSV_SOURCE_FOLDER);


# Populate a dictionary object with values from patient table.  This greatly improves performance over
# looking up values for each INSERT or UPDATE statement.  Also helps prevent duplicates.

sql = "SELECT patientID, encryptedPatientID FROM patient;"
patients = sqlutils.tableToDictionary(sql, 1, 0)

# Start prescription data import
counter = 0
with open(os.path.abspath(filename), 'rU') as f:
    for row in csv.reader(f):
        if any(row) and counter > 0:
            # Even though the primary key used for patients' identifiers is auto-generated by MySQL
            # (sequential number), we still store the original MRN encrypted with MD5 hash
            # to link back to external records and to identify new patient records.
            rawMrn = stringutils.prefixZeros(row[map['MRN']], globals.MAX_MRN_LENGTH)
            mrn = stringutils.computeMD5hash(rawMrn)
            if mrn in patients.keys():
                patientID = patients[mrn]

                # Bit field specifying if the patient participating in the study is still alive.
                # Alive is 1, dead is 0
                isAlive = 1 if row[map['PAT_STATUS']] == 'Alive' else 0

                # Medication ID
                medID = row[map['MED_ID']]

                medName = row[map['MED_NAME']]
                genericMedName = row[map['SIMPLE_GENERIC_NAME']]
                theraputicClass = row[map['THERAPEUTIC_CLASS']]
                pharmClass = row[map['PHARM_CLASS']]
                pharmSubClass = row[map['PHARM_SUB_CLASS']]

                # Order date (needs to be formatted)
                orderDate = stringutils.convertDateToMySQL(row[map['ORDERING_DATE']].strip())


                # Start date (needs to be formatted)
                startDate = stringutils.convertDateToMySQL(row[map['START_DATE']].strip())

                # End date (needs to be formatted)
                endDate = stringutils.convertDateToMySQL(row[map['END_DATE']].strip())

                descr = row[map['DESCRIPTION']].strip()
                sig = row[map['SIG']].strip();

                # Insert only if record does not exist in the database
                sql = "INSERT INTO medications(fk_patientID,isPatientAlive,medID,medName,genericMedName,theraputicClass,pharmClass,pharmSubClass,orderingDate,startDate,endDate, description, sig) "
                sql += "VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);"
                sqlutils.execMysqlQuery(sql, (patientID, isAlive, medID, medName, genericMedName, theraputicClass, pharmClass, pharmSubClass, orderDate, startDate, endDate, descr, sig))


        counter = counter + 1  # Note - counter is only used to ignore the first row of the spreadsheet (contains column headings)


