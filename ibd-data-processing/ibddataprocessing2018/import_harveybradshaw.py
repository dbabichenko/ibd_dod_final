import csv
import os

from utilities import sqlutils, stringutils, globals

def clean_num_vals(val):
    if val == "":
        return -99
    else:
        temp = val.split("=")
        return temp[0]

# This script imports immunization data for existing study patients
# Data is imported from SIBDQ_Pain_Questionaire_2014-02-21.csv
# The following columns are imported:
#       PAT_ID (MRN)
#       CONTACT_DATE
#       ENC_TYPE
#       VISIT_DEPT_NAME
#       COMPLETED_ON
# This script populates the following tables in ibd_import database:
#       questionnaire
#       questionnaire_questions
#       patient_questionnaire_questions
# Excel to database field mappings are defined in mappings/2014/sibdq.json


# Get a list of mapped fields
map = stringutils.getJsonMapping(globals.CURRENT_YEAR, 'harvey_bradshaw')


filename = map["FILENAME"] # Source filename (defined in mappings JSON file)

os.chdir(globals.CSV_SOURCE_FOLDER);


# Populate a dictionary object with values from medication table.  This greatly improves performance over
# looking up values for each INSERT or UPDATE statement.  Also helps prevent duplicates.
sql = "SELECT patientID, encryptedPatientID FROM patient;"
patients = sqlutils.tableToDictionary(sql, 1, 0)

# Start sibdq data import
counter = 0
with open(os.path.abspath(filename), 'rU') as f:
    for row in csv.reader(f):
        if any(row) and counter > 0:
            # Even though the primary key used for patients' identifiers is auto-generated by MySQL
            # (sequential number), we still store the original MRN encrypted with MD5 hash
            # to link back to external records and to identify new patient records.
            rawMrn = stringutils.prefixZeros(row[map['MRN']], globals.MAX_MRN_LENGTH)
            mrn = stringutils.computeMD5hash(rawMrn)



            if mrn in patients.keys():

                patientID = patients[mrn]
                contactDate = stringutils.convertDateToMySQL(row[map['CONTACT_DATE']].strip())
                encType = "Unknown" if row[map['ENC_TYPE']].strip() == "" else row[map['ENC_TYPE']].strip()
                deptName = row[map['VISIT_DEPT_NAME']]
                completedDate = stringutils.convertDateToMySQL(row[map['COMPLETED_ON']].strip())


                CR_GEN_WELL_BEING = clean_num_vals(row[map['CR_GEN_WELL_BEING']])
                #print("WELL-BEING: " + str(CR_GEN_WELL_BEING))
                CR_ABDOMINAL_PAIN = clean_num_vals(row[map['CR_ABDOMINAL_PAIN']])
                CR_LIQUID = clean_num_vals(row[map['CR_LIQUID']])
                CR_ABDOMINAL_MASS = clean_num_vals(row[map['CR_ABDOMINAL_MASS']])
                CR_ARTHRALGIA = clean_num_vals(row[map['CR_ARTHRALGIA']])
                CR_UVEITIS = clean_num_vals(row[map['CR_UVEITIS']])
                CR_ERYTHEMA = clean_num_vals(row[map['CR_ERYTHEMA']])
                CR_APHTHOUS = clean_num_vals(row[map['CR_APHTHOUS']])
                CR_PYODERMA = clean_num_vals(row[map['CR_PYODERMA']])
                CR_FISSURE = clean_num_vals(row[map['CR_FISSURE']])
                CR_NEW_FISTULA = clean_num_vals(row[map['CR_NEW_FISTULA']])
                CR_ABSCESS = clean_num_vals(row[map['CR_ABSCESS']])
                CROHNS_SCORE = clean_num_vals(row[map['CROHNS_SCORE']])
                UC_GEN_WELL_BEING = clean_num_vals(row[map['UC_GEN_WELL_BEING']])
                UC_ABDOMINAL_PAIN = clean_num_vals(row[map['UC_ABDOMINAL_PAIN']])
                UC_LIQUID = clean_num_vals(row[map['UC_LIQUID']])
                UC_DEGREE_BLEED = clean_num_vals(row[map['UC_DEGREE_BLEED']])
                UC_APHTHOUS = clean_num_vals(row[map['UC_APHTHOUS']])
                UC_ERYTHEMA = clean_num_vals(row[map['UC_ERYTHEMA']])
                UC_PERIPHERAL = clean_num_vals(row[map['UC_PERIPHERAL']])
                UC_ACUTE_IRITIS = clean_num_vals(row[map['UC_ACUTE_IRITIS']])
                UC_SCORE = clean_num_vals(row[map['UC_SCORE']])


                sql = "INSERT INTO harvey_bradshaw (fk_patientID,contactDate,encounterType,visitDepartment,completedOn, "
                sql+= "CR_GEN_WELL_BEING,CR_ABDOMINAL_PAIN,CR_LIQUID,CR_ABDOMINAL_MASS,CR_ARTHRALGIA,CR_UVEITIS, "
                sql+= "CR_ERYTHEMA,CR_APHTHOUS,CR_PYODERMA,CR_FISSURE,CR_NEW_FISTULA,CR_ABSCESS,CROHNS_SCORE, "
                sql+= "UC_GEN_WELL_BEING,UC_ABDOMINAL_PAIN,UC_LIQUID,UC_DEGREE_BLEED,UC_APHTHOUS,UC_ERYTHEMA, "
                sql+= "UC_PERIPHERAL,UC_ACUTE_IRITIS,UC_SCORE) "

                sql += "VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);"
                sqlutils.execMysqlQuery(sql, (patientID, contactDate, encType, deptName, completedDate, CR_GEN_WELL_BEING,CR_ABDOMINAL_PAIN,CR_LIQUID,CR_ABDOMINAL_MASS,CR_ARTHRALGIA,CR_UVEITIS,CR_ERYTHEMA,CR_APHTHOUS,CR_PYODERMA,CR_FISSURE,CR_NEW_FISTULA,CR_ABSCESS,CROHNS_SCORE,UC_GEN_WELL_BEING,UC_ABDOMINAL_PAIN,UC_LIQUID,UC_DEGREE_BLEED,UC_APHTHOUS,UC_ERYTHEMA,UC_PERIPHERAL,UC_ACUTE_IRITIS,UC_SCORE))


        counter = counter + 1  # Note - counter is only used to ignore the first row of the spreadsheet (contains column headings)


